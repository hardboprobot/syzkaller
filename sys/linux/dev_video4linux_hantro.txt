# Copyright 2020 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

# V4L2 specific support for the hantro driver.

include <linux/time.h>
include <linux/types.h>
include <uapi/asm/ioctl.h>
include <uapi/linux/fcntl.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/v4l2-common.h>
include <uapi/linux/v4l2-subdev.h>
include <uapi/linux/v4l2-mediabus.h>
include <uapi/linux/media-bus-format.h>
include <uapi/linux/v4l2-controls.h>

resource fd_hantro_dec[int32]: -1
resource fd_hantro_enc[int32]: -1

fd_hantro [
	enc	fd_hantro_enc
	dec	fd_hantro_dec
]

openat$hantro_enc(fd const[AT_FDCWD], file ptr[in, string["/dev/hantro_enc"]], flags const[O_RDWR], mode const[0]) fd_hantro_enc
openat$hantro_dec(fd const[AT_FDCWD], file ptr[in, string["/dev/hantro_dec"]], flags const[O_RDWR], mode const[0]) fd_hantro_dec
openat$hantro_media(fd const[AT_FDCWD], file ptr[in, string["/dev/hantro_media"]], flags const[O_RDWR], mode const[0]) fd_media

ioctl$hantro_VIDIOC_QUERYCAP(fd fd_hantro, cmd const[VIDIOC_QUERYCAP], arg ptr[out, v4l2_capability])
ioctl$hantro_VIDIOC_ENUM_FMT(fd fd_hantro, cmd const[VIDIOC_ENUM_FMT], arg ptr[inout, v4l2_fmtdesc[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_ENUM_FRAMESIZES(fd fd_hantro, cmd const[VIDIOC_ENUM_FRAMESIZES], arg ptr[inout, v4l2_frmsizeenum])
ioctl$hantro_VIDIOC_G_FMT(fd fd_hantro, cmd const[VIDIOC_G_FMT], arg ptr[inout, v4l2_format[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_TRY_FMT(fd fd_hantro, cmd const[VIDIOC_TRY_FMT], arg ptr[inout, v4l2_format[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_S_FMT(fd fd_hantro, cmd const[VIDIOC_S_FMT], arg ptr[inout, v4l2_format[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_REQBUFS(fd fd_hantro, cmd const[VIDIOC_REQBUFS], arg ptr[inout, v4l2_requestbuffers[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_QUERYBUF(fd fd_hantro, cmd const[VIDIOC_QUERYBUF], arg ptr[inout, v4l2_buffer[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_QBUF(fd fd_hantro, cmd const[VIDIOC_QBUF], arg ptr[inout, v4l2_buffer[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_DQBUF(fd fd_hantro, cmd const[VIDIOC_DQBUF], arg ptr[inout, v4l2_buffer[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_PREPARE_BUF(fd fd_hantro, cmd const[VIDIOC_PREPARE_BUF], arg ptr[inout, v4l2_buffer[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_CREATE_BUFS(fd fd_hantro, cmd const[VIDIOC_CREATE_BUFS], arg ptr[inout, v4l2_create_buffers[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_EXPBUF(fd fd_hantro, cmd const[VIDIOC_EXPBUF], arg ptr[inout, v4l2_exportbuffer[v4l2_buf_type_vim2m]])
ioctl$hantro_VIDIOC_S_CTRL(fd fd_hantro, cmd const[VIDIOC_S_CTRL], arg ptr[inout, v4l2_control])
ioctl$hantro_VIDIOC_STREAMON(fd fd_hantro, cmd const[VIDIOC_STREAMON], arg ptr[in, flags[v4l2_buf_type_vim2m, int32]])
ioctl$hantro_VIDIOC_STREAMOFF(fd fd_hantro, cmd const[VIDIOC_STREAMON], arg ptr[in, flags[v4l2_buf_type_vim2m, int32]])
ioctl$hantro_VIDIOC_S_EXT_CTRLS(fd fd_hantro, cmd const[VIDIOC_S_EXT_CTRLS], arg ptr[inout, v4l2_ext_controls])

syz_hantro_start(video_fd fd_hantro, media_fd fd_media) fd_request

mmap$hantro(addr vma, len len[addr], prot flags[mmap_prot], flags flags[mmap_flags], fd fd_hantro, offset intptr[0:0xffffffff, 0x1000])
